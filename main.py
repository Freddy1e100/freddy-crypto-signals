import streamlit as st
import pandas as pd
import ta
import ccxt
import os
import requests
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(page_title="üìà –ö—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã (Binance)", layout="centered")
st.title("üìà –ö—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã (Binance)")
st.write("–ü–æ–ª—É—á–∞–π –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–∞—Ä–∞–º.")

# Telegram –¥–∞–Ω–Ω—ã–µ
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or "7903391510:AAFgkj03oD8CGL3hfVNKPAE64phffpsxAEM"
TELEGRAM_CHAT_ID = int(os.getenv("TELEGRAM_CHAT_ID") or 646839309)

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ Telegram:", e)

# Binance
exchange = ccxt.binance()

PAIRS = ["BTC/USDT", "ETH/USDT", "SOL/USDT", "PAXG/USDT"]

def fetch_data(pair):
    try:
        ohlcv = exchange.fetch_ohlcv(pair, timeframe='1h', limit=100)
        df = pd.DataFrame(ohlcv, columns=['Time', 'Open', 'High', 'Low', 'Close', 'Volume'])
        df['Time'] = pd.to_datetime(df['Time'], unit='ms')
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair}: {e}")
        return pd.DataFrame()

def analyze(df):
    if df.empty or len(df) < 50:
        return None

    df["EMA50"] = ta.trend.ema_indicator(df["Close"], window=50).ema_indicator()
    df["RSI"] = ta.momentum.rsi(df["Close"])
    df["StochRSI"] = ta.momentum.stochrsi(df["Close"])

    last = df.iloc[-1]
    signals = []

    if last["RSI"] < 30:
        signals.append("üü¢ RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif last["RSI"] > 70:
        signals.append("üî¥ RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

    if last["Close"] > last["EMA50"]:
        signals.append("üìà –¶–µ–Ω–∞ –≤—ã—à–µ EMA50 (—Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö)")
    else:
        signals.append("üìâ –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA50 (—Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑)")

    if last["StochRSI"] < 0.2:
        signals.append("üü¢ StochRSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
    elif last["StochRSI"] > 0.8:
        signals.append("üî¥ StochRSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")

    return signals if signals else ["‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç"]

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
all_signals = []
for pair in PAIRS:
    df = fetch_data(pair)
    analysis = analyze(df)

    st.subheader(pair)
    if not analysis:
        st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        all_signals.append(f"{pair}:\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
    else:
        for s in analysis:
            st.write(s)
        all_signals.append(f"{pair}:\n" + "\n".join(analysis))

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
if st.button("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –≤ Telegram"):
    for signal in all_signals:
        if "üü¢" in signal or "üî¥" in signal:
            send_telegram_message(signal)
    st.success("–°–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
